global lowercase, uppercase, numericals, symbols-- Constantsset lowercase to "abcdefghijklmnopqrstuvwxyz"set uppercase to "ABCDEFGHIJKLMNOPQRSTUVWXYZ"set numericals to "0123456789"set symbols to "@#$*%(&^)"showPasswordAlert()on showPasswordAlert()	set generatedPassword to generatePassword()	set displayText to "New password generated is " & generatedPassword & ". Enter title for this password"	set passwordDialog to display alert generatedPassword message "This is your new generated password. Would you like to go ahead and save it?" buttons {"Generate new", "Copy & Save"} default button 2	set selectedButton to button returned of passwordDialog		if selectedButton is equal to "Copy & Save" then		copyToClipboard(generatedPassword)		showSavePasswordDialog(generatedPassword)	else		showPasswordAlert()	end ifend showPasswordAlerton showSavePasswordDialog(password)	set displayMessage to "Enter title for password: " & password	set saveDialog to display dialog displayMessage default answer "" buttons {"Cancel", "Save"} default button 2	set selectedButton to button returned of saveDialog	set passwordTitle to text returned of saveDialog		if selectedButton is equal to "Save" then		writePassword(passwordTitle, password)	end ifend showSavePasswordDialogon copyToClipboard(password)	set the clipboard to passwordend copyToClipboard-- generate password. -- This is done by first selecting 5 lowercases, 5 uppercases, 3 numericals & 2 symbols.-- The selected list is then shuffled to generate a new shuffled password stringon generatePassword()	set chars to {}	set shuffledChars to {}		repeat with index from 1 to 15		if index is less than 5 then			set chars to chars & some item of lowercase		else if index is less than 10 then			set chars to chars & some item of uppercase		else if index is less than 13 then			set chars to chars & some item of numericals		else			set chars to chars & some item of symbols		end if	end repeat		-- Shuffle into new list	repeat 15 times		-- Get a random index		set randomIndex to random number from 1 to (count chars)				-- select item at random index and append to shuffled list		set randomChar to item randomIndex of chars		set shuffledChars to shuffledChars & randomChar				-- generate list of remaining chars		set reducedChars to {}		repeat with index from 1 to (count chars)			if index is not equal to randomIndex then				set reducedChars to reducedChars & item index of chars			end if		end repeat				set chars to reducedChars	end repeat		return shuffledChars as text	end generatePasswordon writePassword(title, passwordString)	try		set textToBeWritten to "
" & title & ":" & passwordString		set documentsPath to path to documents folder as text		set passwordFile to documentsPath & "password.txt"				set the logFile to ((path to documents folder) as text) & "password.txt"		try			open for access file the logFile with write permission			write textToBeWritten to file the logFile starting at eof			close access file the logFile		on error			try				close access file the logFile			end try		end try				-- tell application "Finder"		-- write "sample" to filePath starting at eof		-- end tell				-- tell application "Finder" to set passwordFileReference to (open for access file passwordFile with write permission)				-- write textToBeWritten to passwordFileReference starting at eof		-- tell application "Finder" to close access passwordFileReference	on error errMsg		display dialog passwordFile & errMsg	end tryend writePassword